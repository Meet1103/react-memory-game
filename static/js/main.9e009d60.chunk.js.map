{"version":3,"sources":["Components/GameData/GameData.js","Components/Card/Card.js","Components/GameBoard/GameBoard.js","Components/ResultPage/ResultPage.js","Components/DifficultyLevel/DifficultyLevel.js","App.js","index.js"],"names":["gameData","id","name","generatingRandomCards","value","newGameData","splice","gameCards","i","length","j","Math","floor","random","shuffleCards","Card","flippedCards","disabled","matchCards","handleClick","className","onClick","src","alt","GameBoard","cards","map","card","index","includes","ResultPage","steps","DifficultyLevel","onHandleClick","App","useState","setCards","numberOfCards","setNumberOfCards","setFlippedCards","setDisabled","setMatchCards","setSteps","result","setResult","useEffect","setTimeout","resetCards","sameClickedCard","isMatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e009d60.chunk.js","sourcesContent":["const gameData = [\r\n    {\r\n        id: 4,\r\n        name: \"charmander\"\r\n    },\r\n    {\r\n        id: 7,\r\n        name: \"squirtle\"\r\n    },\r\n    {\r\n        id: 13,\r\n        name: \"weedle\"\r\n    },\r\n    {\r\n        id: 25,\r\n        name: \"pikachu\"\r\n    },\r\n    {\r\n        id: 39,\r\n        name: \"jigglypuff\"\r\n    },\r\n    {\r\n        id: 95,\r\n        name: \"onix\"\r\n    }\r\n]\r\n\r\nconst generatingRandomCards = (value) => {\r\n    let newGameData = [...gameData]\r\n    switch(value) {\r\n        case 4:\r\n            newGameData.splice(4, 2)\r\n            break\r\n\r\n        case 5:\r\n            newGameData.splice(5, 1)\r\n            break\r\n\r\n        case 6:\r\n            newGameData.splice(5, 0)\r\n            break\r\n    }\r\n\r\n    const gameCards = [...newGameData, ...newGameData]\r\n\r\n\r\n    function shuffleCards() {\r\n        for (let i = gameCards.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [gameCards[i], gameCards[j]] = [gameCards[j], gameCards[i]];\r\n        }\r\n\r\n        return gameCards;\r\n    }\r\n\r\n    return shuffleCards()\r\n}\r\n\r\nexport default generatingRandomCards;","import React from \"react\";\r\nimport './Card.css';\r\n\r\nfunction Card({name, id, flippedCards, disabled, matchCards, handleClick}) {\r\n    return (\r\n        <div className={`card ${flippedCards || matchCards ? \"flip\" : \"\"}`} onClick={!disabled ? handleClick : null}>\r\n            <img className=\"front-face\" src={`https://pokeres.bastionbot.org/images/pokemon/${id}.png`}  alt=\"Aurelia\" />\r\n            <img className=\"back-face\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNZMJXDGDhurvl3yJFRKcV-my1LChRTxt_cQ&usqp=CAU\" alt={name} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from '../Card/Card'\r\nimport './GameBoard.css'\r\n\r\nfunction GameBoard({\r\n\tcards,\r\n\tflippedCards,\r\n\tdisabled,\r\n\tmatchCards,\r\n\thandleClick,\r\n}) {\r\n\treturn (\r\n\t\t<div className='game-board'>\r\n\t\t\t{cards.map((card, index) => (\r\n\t\t\t\t<Card\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t\tname={card.name}\r\n\t\t\t\t\tid={card.id}\r\n\t\t\t\t\tflippedCards={flippedCards.includes(index)}\r\n\t\t\t\t\tdisabled={\r\n\t\t\t\t\t\tdisabled ||\r\n\t\t\t\t\t\tmatchCards.includes(index) ||\r\n\t\t\t\t\t\tflippedCards.includes(index)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmatchCards={matchCards.includes(index)}\r\n\t\t\t\t\thandleClick={() => handleClick(index)}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GameBoard\r\n","import React from \"react\";\r\nimport './ResultPage.css';\r\n\r\nfunction ResultPage( {steps} ) {\r\n    return (\r\n        <div className=\"result-page-container\">\r\n            <div className=\"result-page-text\">Hurray!!! You've finished the game. You took {steps} steps to finish the game</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultPage;","import React from \"react\";\r\nimport './DifficultyLevel.css';\r\n\r\nfunction DifficultyLevel({onHandleClick}) {\r\n    return (\r\n        <div className=\"difficulty-level-container\">\r\n            <h1 className=\"difficulty-level-heading\">Hii there!! Choose the difficulty level of memory game</h1>\r\n            <button className=\"difficulty-level-btn\" onClick={() => onHandleClick(4)}>Easy</button>\r\n            <button className=\"difficulty-level-btn\" onClick={() => onHandleClick(5)}>Medium</button>\r\n            <button className=\"difficulty-level-btn\" onClick={() => onHandleClick(6)}>Hard</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DifficultyLevel;","import React, {useState, useEffect} from \"react\";\nimport generatingRandomCards from \"./Components/GameData/GameData\";\nimport GameBoard from \"./Components/GameBoard/GameBoard\"\nimport ResultPage from \"./Components/ResultPage/ResultPage\"\nimport DifficultyLevel from \"./Components/DifficultyLevel/DifficultyLevel\"\nimport './App.css'\n\nconst App = () => {\n\n  // Store cards data into cards array\n  const [cards, setCards] = useState([])\n\n  // Sets number of cards as per difficulty level choosen by user\n  const [numberOfCards, setNumberOfCards] = useState(0)\n\n  // Store flip cards index into flippedCards array\n  const [flippedCards, setFlippedCards] = useState([])\n\n  // Disable the card to flip\n  const [disabled, setDisabled] = useState(false)\n\n  // Store match cards index into matchCards array\n  const [matchCards, setMatchCards] = useState([])\n\n  // Store steps user have taken to finish the game\n  const [steps,setSteps] = useState(0)\n\n  // Show GameBoard if result is false else its shows ResultPage\n  const [result, setResult] = useState(false)\n\n  // Store game's data to cards array when user selects difficulty level\n  useEffect(() => {\n    setCards(generatingRandomCards(numberOfCards))\n  }, [numberOfCards])\n\n  // Run everytime when matchCards values changes\n  useEffect(() => {\n    if(cards.length > 0 && matchCards.length === numberOfCards * 2) {\n      setTimeout(() => setResult(true), 1000)\n    }\n  }, [matchCards])\n\n  // Sets the numbers of cards to display as per difficulty level choosen by user\n  const onHandleClick = (value) => {\n    setNumberOfCards(value)\n  }\n\n  // Restarts Memory Game \n  const restartGame = () => {\n    setCards([])\n    setNumberOfCards(0)\n    setFlippedCards([])\n    setMatchCards([])\n    setSteps(0)\n    setDisabled(false)\n    setResult(false) \n  }\n\n  // Checks if the clicked card is same as before clicked card or not\n  const sameClickedCard = (id) => {\n    return flippedCards.includes(id)\n  }\n\n  // Checks if clicked card matches with the first one or not\n  const isMatch = (id) => {\n    const firstCard = cards[flippedCards[0]].name\n    const secondCard = cards[id].name\n    return firstCard === secondCard\n  }\n\n  // Removes card indexes from flippedCard array and set disabled to false\n  const resetCards = () => {\n    setFlippedCards([])\n    setDisabled(false)\n  }\n\n  // Runs everytime a card is clicked\n  const handleClick = (id) => {\n    \n    // Incrementing step value everytime user clicks on the card\n    setSteps((steps) => steps + 1)\n\n    // Sets disable to true every time a card is clicked\n    setDisabled(true)\n\n    // Checks if the card clicked is the first one or not\n    if(flippedCards.length === 0) {\n      // Store index of first clicked card into flippedCard array and sets disable value to false\n      setFlippedCards([id])\n      setDisabled(false)\n    } \n\n    // Checks if the clicked card is same as before clicked card or not\n    else if (sameClickedCard(id)) {\n      setDisabled(false)\n      return\n    } \n    \n    else { \n      // Store index of second clicked card into flippedCard array\n      setFlippedCards([...flippedCards, id])\n\n      if (isMatch(id)) {\n        // Store indexes of matched card into matchCard array\n        setMatchCards([...matchCards, flippedCards[0], id])\n        resetCards()\n      } else {\n        setTimeout(() => resetCards() , 1500)\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1 className=\"heading\">Memory Game</h1>\n        {\n        numberOfCards ? <button \n        className=\"restart-game-btn\" \n        onClick={restartGame}>\n        Restart Game\n        </button> : null\n        }\n      </div>\n      {\n      (!numberOfCards) ? <DifficultyLevel \n      onHandleClick={onHandleClick} \n      /> :  (!result) ? <GameBoard \n      cards={cards} \n      flippedCards={flippedCards} \n      disabled={disabled} \n      matchCards={matchCards} \n      handleClick={handleClick} \n      /> : <ResultPage steps={steps} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}